<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NoC of Xilinx ACAP</title>
    <url>/2024/11/13/NoC-of-Xilinx-ACAP/</url>
    <content><![CDATA[<h1 id="Network-on-Chip-Programmable-Platform-in-VersalTM-ACAP-Architecture"><a href="#Network-on-Chip-Programmable-Platform-in-VersalTM-ACAP-Architecture" class="headerlink" title="Network-on-Chip Programmable Platform in VersalTM ACAP Architecture"></a>Network-on-Chip Programmable Platform in VersalTM ACAP Architecture</h1><h2 id="1-INTRO"><a href="#1-INTRO" class="headerlink" title="1 INTRO"></a>1 INTRO</h2><p>在 FPGA上设计的电路日渐复杂，存储器带宽日渐增加和设计者更加关注面向需求的专用电路设计这三个因素共同推动着 FPGA 架构的演进。</p>
<p>随着制程提升，金属的线电阻不断增加，造成互连延迟增加，FPGA 布线时关键路径上的时延增加。</p>
<p>传统的 FPGA 互连面临两个问题，一是逻辑资源，二是设计的最高频率和关键路径时延无法被事先得知。<br>2 NoC</p>
<hr>
<ul>
<li>支持 QoS</li>
</ul>
<p>Quality of service is the ability to provide different priorities to different applications, users, or data <a href="https://en.wikipedia.org/wiki/Traffic_flow_(computer_networking)">flows</a>, or to guarantee a certain level of performance to a data flow.</p>
<ul>
<li>包含虚拟通道</li>
</ul>
<h2 id="3-Versal-NoC"><a href="#3-Versal-NoC" class="headerlink" title="3 Versal NoC"></a>3 Versal NoC</h2><p>Versal 架构</p>
<img title="arch" src="https://s21.ax1x.com/2024/11/13/pAcvzz6.png" alt="" data-align="center">

<p>NoC 在芯片中扮演两个角色：</p>
<ol>
<li>为芯片中所有资源提供永久的可统一寻址的互连</li>
<li>可以代替可编程逻辑提供开关和路由功能</li>
</ol>
<p>Versal NoC 数据包传输结构：AXI&#x2F;AXI-S</p>
<img title="" src="https://s21.ax1x.com/2024/11/13/pAcvvJ1.png" alt="loading-ag-351" data-align="center">

<p>Versal NoC 拓扑：</p>
<img title="" src="https://s21.ax1x.com/2024/11/13/pAcxpQK.png" alt="" data-align="center">

<p>Versal NoC 可以分为两部分：HNoC 和 VNoC</p>
<p>HNoC 水平分布，上下连接芯片中的硬核，VNoC 垂直分布，连接可编程结构。 VNoC 不是独立的互连结构，其像 DSP 一样作为一个硬核集成在可编程结构中。</p>
<p>Versal NoC 的一个重要作用是高效管理各模块对 DDR 的访问，VNoC 的频率和带宽与 DDR 相匹配：</p>
<p><mark>For example, a device with 64 bit DDR4 3200 has 25.6GBps bandwidth. A VNoC running at 1GHz has two physical channels supporting upto 16GBps each per direction.</mark></p>
<p>NoC 支持可编程交织式的使用内存，将所有内存看做一个存储池，交织式的在每一个 DDR 上操作 128B 到 4KB 的空间。</p>
<p> Versal NoC 的路由表是可编程的（不同的设计用到的资源和连接不同），NoC 在多个 DIE 上是逻辑统一的。 </p>
<h2 id="4-基于-Versal-NoC-的设计"><a href="#4-基于-Versal-NoC-的设计" class="headerlink" title="4 基于 Versal NoC 的设计"></a>4 基于 Versal NoC 的设计</h2><hr>
<p>与 SoC 中的 NoC 相比，Versal NoC 是可编程的，其拓扑，带宽和 QoS 都可以自定义，其允许所有可能的点对点通信。 </p>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5 结论"></a>5 结论</h2><hr>
<p>使用可编程逻辑实现 NoC 时，NoC 能够提供的带宽与计算节点的放置位置相关，而 NoC 硬核能够提供的带宽则不受位置影响。NoC 的编程和优化远快于可编程逻辑布局布线。</p>
<img title="" src="https://s21.ax1x.com/2024/11/13/pAcvxRx.png" alt="" data-align="center">

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>Paper Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用教程</title>
    <url>/2024/11/12/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="1-Git-使用教程"><a href="#1-Git-使用教程" class="headerlink" title="1. Git 使用教程"></a>1. Git 使用教程</h3><h4 id="1-1-创建与提交"><a href="#1-1-创建与提交" class="headerlink" title="1.1 创建与提交"></a>1.1 创建与提交</h4><ol>
<li>在本地创建ssh key：</li>
</ol>
<p><code>ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code></p>
<ol start="2">
<li><p>输入上述命令后~&#x2F;.ssh中将出现一个id_rsd.pub文件，将该文件中的key复制到github的ssh key配置页面：</p>
<img src="https://s21.ax1x.com/2024/11/13/pAcz5uT.png" title="" alt="" data-align="center">
</li>
<li><p>输入<code> ssh -T git@github.com</code>确认是否key配置成功</p>
</li>
<li><p>配置信息：</p>
</li>
</ol>
<p><code>git config --global user.name &quot;your name&quot;  git config --global user.email &quot;your_email@youremail.com&quot;</code></p>
<ol start="5">
<li>在github上创建一个仓库，并在本地关联该仓库，此处有两种办法：</li>
</ol>
<p>① 直接将仓库clone到本地，进入仓库目录即可：</p>
<p><code>git clone git@github.com:JerryLiF/Chiplet_based_DSE_Simulator.git</code></p>
<p>② 建立一个与github上仓库同名的本地目录，进入该目录并输入<code>git init</code>初始化仓库。而后输入：<code>git remote add origin git@github.com:yourName/yourRepo.git</code>关联GitHub上的远端仓库。</p>
<p><mark>注意：旧版本git初始化后默认的分支为master，但新版本GithHub默认分支为main，为了保持一致需先将git升级到2.28版本之后，通过<code>git config --global init.defaultBranch main</code>命令进行全局修改。</mark></p>
<ol start="6">
<li><p>创建新文件或修改文件后，使用<code>git add *</code>命令将文件提交到暂存区</p>
</li>
<li><p>将改动提交到HEAD：<code>git commit -m &quot;备注&quot;</code></p>
</li>
<li><p>将改动提交到远程仓库：<code>git push origin 分支名称</code></p>
</li>
<li><p>分支操作：</p>
</li>
</ol>
<p>创建新分支：<code>git checkout -b feature_x</code></p>
<p>切换分支：<code>git checkout master</code></p>
<p>删除分支：<code>git branch -d feature_x</code></p>
<h4 id="1-2-更新与合并"><a href="#1-2-更新与合并" class="headerlink" title="1.2 更新与合并"></a>1.2 更新与合并</h4><p>将远端仓库的更新同步到本地：<code>git pull</code></p>
<p>合并其他分支到当前分支：<code>git merge &lt;branch&gt;</code></p>
<p>查看两个分支的差异：<code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="2-GitHub使用"><a href="#2-GitHub使用" class="headerlink" title="2. GitHub使用"></a>2. GitHub使用</h3><h4 id="2-1-在vscode中向GitHub提交代码"><a href="#2-1-在vscode中向GitHub提交代码" class="headerlink" title="2.1 在vscode中向GitHub提交代码"></a>2.1 在vscode中向GitHub提交代码</h4><ol>
<li><p>使用vscode打开本地仓库的文件夹</p>
</li>
<li><p>进入源代码管理页面：</p>
</li>
</ol>
<p><img src="https://s21.ax1x.com/2024/11/13/pAczO81.png"></p>
<h3 id="3-基于Github和Hexo搭建个人博客"><a href="#3-基于Github和Hexo搭建个人博客" class="headerlink" title="3. 基于Github和Hexo搭建个人博客"></a>3. 基于Github和Hexo搭建个人博客</h3><p>常用命令：<br>    hexo new “postName” #新建文章<br>    hexo new page “pageName” #新建页面<br>    hexo generate #生成静态页面至public目录<br>    hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>    hexo deploy #部署到GitHub<br>    hexo help  # 查看帮助<br>    hexo version  #查看Hexo的版本</p>
]]></content>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
